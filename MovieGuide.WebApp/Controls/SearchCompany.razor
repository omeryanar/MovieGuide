@inject TmdbService TmdbService

<MudAutocomplete Margin="Margin.Dense" @bind-Value="Company" SearchFunc="SearchCompanies"></MudAutocomplete>
<MudChipSet T="ProductionCompany" AllClosable="true" Class="ml-n2 mt-2" OnClose="Remove">
    @if (Companies != null)
    {
        foreach (ProductionCompany company in Companies)
        {
            <MudChip Class="chip" Text="@company.Name" Value="company" Color="Color.Primary" />
        }
    }
</MudChipSet>

@code
{
    [Parameter]
    public ICollection<int> SelectedCompanies { get; set; }

    [Parameter]
    public EventCallback<ICollection<int>> SelectedCompaniesChanged { get; set; }

    public ProductionCompany Company
    {
        get => company;
        set
        {
            company = value;
            if (company != null && SelectedCompanies?.Contains(company.Id) == false)
            {
                Companies.Add(company);

                if (SelectedCompanies == null)
                    SelectedCompanies = new List<int>() { company.Id };
                else
                    SelectedCompanies.Add(company.Id);

                SelectedCompaniesChanged.InvokeAsync(SelectedCompanies);
                company = null;
            }
        }
    }
    private ProductionCompany company;

    private List<ProductionCompany> Companies = new List<ProductionCompany>();

    protected async override Task OnInitializedAsync()
    {
        if (SelectedCompanies?.Count > Companies.Count)
        {
            foreach (int companyId in SelectedCompanies)
            {
                ProductionCompany company = await TmdbService.GetCompany(companyId.ToString());
                if (company != null)
                    Companies.Add(company);
            }
        }
    }

    private async Task<IEnumerable<ProductionCompany>> SearchCompanies(string query, CancellationToken token)
    {
        SearchContainer<ProductionCompany> search = await TmdbService.SearchCompany(query);
        return search.Results;
    }

    private void Remove(MudChip<ProductionCompany> chip)
    {
        Companies?.Remove(chip.Value);
        SelectedCompanies?.Remove(chip.Value.Id);
        SelectedCompaniesChanged.InvokeAsync(SelectedCompanies);
    }
}