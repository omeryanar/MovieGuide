@inject TmdbService TmdbService

<MudAutocomplete Margin="Margin.Dense" @bind-Value="Person" SearchFunc="SearchPerson"></MudAutocomplete>
<MudChipSet T="SearchPerson" AllClosable="true" Class="ml-n2 mt-2" OnClose="Remove">
    @if (People != null)
    {
        foreach (SearchPerson person in People)
        {
            <MudChip Class="chip" Text="@person.Name" Value="person" Color="Color.Primary" />
        }
    }
</MudChipSet>

@code
{
    [Parameter]
    public ICollection<int> SelectedPeople { get; set; }

    [Parameter]
    public EventCallback<ICollection<int>> SelectedPeopleChanged { get; set; }

    public SearchPerson Person
    {
        get => person;
        set
        {
            person = value;
            if (person != null && SelectedPeople?.Contains(person.Id) == false)
            {
                People.Add(person);

                if (SelectedPeople == null)
                    SelectedPeople = new List<int>() { person.Id };
                else
                    SelectedPeople.Add(person.Id);

                SelectedPeopleChanged.InvokeAsync(SelectedPeople);
                person = null;
            }
        }
    }
    private SearchPerson person;

    private List<SearchPerson> People = new List<SearchPerson>();

    protected async override Task OnInitializedAsync()
    {
        if (SelectedPeople?.Count > People.Count)
        {
            foreach (int personId in SelectedPeople)
            {
                SearchPerson person = await TmdbService.GetPerson(personId.ToString());
                if (person != null)
                    People.Add(person);
            }
        }
    }

    private async Task<IEnumerable<SearchPerson>> SearchPerson(string query, CancellationToken token)
    {
        SearchContainer<SearchPerson> search = await TmdbService.SearchPerson(query);
        return search.Results;
    }

    private void Remove(MudChip<SearchPerson> chip)
    {
        People?.Remove(chip.Value);
        SelectedPeople?.Remove(chip.Value.Id);
        SelectedPeopleChanged.InvokeAsync(SelectedPeople);
    }
}
